// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using System.Threading.Tasks;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1912.403 at 11:38 on jeudi 5 novembre 2020.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9 has executed. Set this to false to force re-execution of Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9</summary>
		public bool Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12</summary>
		public bool Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12</summary>
		public bool Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13</summary>
		public bool Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13</summary>
		public bool Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11</summary>
		public bool Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11</summary>
		public bool Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised;
		/// <summary>True if Changed_ProbWordPrior has executed. Set this to false to force re-execution of Changed_ProbWordPrior</summary>
		public bool Changed_ProbWordPrior_isDone;
		/// <summary>True if Changed_Task has executed. Set this to false to force re-execution of Changed_Task</summary>
		public bool Changed_Task_isDone;
		/// <summary>True if Changed_TruthProbPrior has executed. Set this to false to force re-execution of Changed_TruthProbPrior</summary>
		public bool Changed_TruthProbPrior_isDone;
		/// <summary>True if Changed_Word_WordCount has executed. Set this to false to force re-execution of Changed_Word_WordCount</summary>
		public bool Changed_Word_WordCount_isDone;
		/// <summary>True if Changed_WordCount has executed. Set this to false to force re-execution of Changed_WordCount</summary>
		public bool Changed_WordCount_isDone;
		/// <summary>True if Changed_WorkerConfusionMatrixPrior has executed. Set this to false to force re-execution of Changed_WorkerConfusionMatrixPrior</summary>
		public bool Changed_WorkerConfusionMatrixPrior_isDone;
		/// <summary>True if Changed_WorkerCount has executed. Set this to false to force re-execution of Changed_WorkerCount</summary>
		public bool Changed_WorkerCount_isDone;
		/// <summary>True if Changed_WorkerCount_WorkerLabel_WorkerTaskCount has executed. Set this to false to force re-execution of Changed_WorkerCount_WorkerLabel_WorkerTaskCount</summary>
		public bool Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone;
		/// <summary>True if Changed_WorkerTaskCount has executed. Set this to false to force re-execution of Changed_WorkerTaskCount</summary>
		public bool Changed_WorkerTaskCount_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'evidence'</summary>
		public Bernoulli evidence_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'ProbWord'</summary>
		public DistributionRefArray<Dirichlet,Vector> ProbWord_marginal_F;
		/// <summary>Message from use of 'ProbWord'</summary>
		public DistributionRefArray<Dirichlet,Vector> ProbWord_use_B;
		/// <summary>Field backing the ProbWordPrior property</summary>
		private Dirichlet probWordPrior;
		public PointMass<Dirichlet> ProbWordPrior_marginal;
		/// <summary>Field backing the Task property</summary>
		private int[][] task;
		public PointMass<int[][]> Task_marginal;
		/// <summary>Message to marginal of 'Truth'</summary>
		public DistributionRefArray<Discrete,int> Truth_marginal_F;
		/// <summary>Message to marginal of 'TruthProb'</summary>
		public Dirichlet TruthProb_marginal_F;
		/// <summary>Message from use of 'TruthProb'</summary>
		public Dirichlet TruthProb_use_B;
		/// <summary>Field backing the TruthProbPrior property</summary>
		private Dirichlet truthProbPrior;
		public PointMass<Dirichlet> TruthProbPrior_marginal;
		/// <summary>Field backing the Word property</summary>
		private int[][] word;
		public DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> Word_marginal;
		/// <summary>Field backing the WordCount property</summary>
		private int[] wordCount;
		public PointMass<int[]> WordCount_marginal;
		/// <summary>Message to marginal of 'WorkerConfusionMatrix'</summary>
		public DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> WorkerConfusionMatrix_marginal_F;
		/// <summary>Message from use of 'WorkerConfusionMatrix'</summary>
		public DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> WorkerConfusionMatrix_use_B;
		/// <summary>Field backing the WorkerConfusionMatrixPrior property</summary>
		private Dirichlet[][] workerConfusionMatrixPrior;
		public PointMass<Dirichlet[][]> WorkerConfusionMatrixPrior_marginal;
		/// <summary>Field backing the WorkerCount property</summary>
		private int workerCount;
		public PointMass<int> WorkerCount_marginal;
		/// <summary>Field backing the WorkerLabel property</summary>
		private int[][] workerLabel;
		public DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> WorkerLabel_marginal;
		/// <summary>Field backing the WorkerTaskCount property</summary>
		private int[] workerTaskCount;
		public PointMass<int[]> WorkerTaskCount_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ProbWordPrior'</summary>
		public Dirichlet ProbWordPrior
		{
			get {
				return this.probWordPrior;
			}
			set {
				this.probWordPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isDone = false;
				this.Changed_ProbWordPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Task'</summary>
		public int[][] Task
		{
			get {
				return this.task;
			}
			set {
				if ((value!=null)&&(value.Length!=this.workerCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.workerCount)+" was expected for variable \'Task\'");
				}
				this.task = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_Task_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'TruthProbPrior'</summary>
		public Dirichlet TruthProbPrior
		{
			get {
				return this.truthProbPrior;
			}
			set {
				this.truthProbPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_TruthProbPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Word'</summary>
		public int[][] Word
		{
			get {
				return this.word;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'Word\'");
				}
				this.word = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_Word_WordCount_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WordCount'</summary>
		public int[] WordCount
		{
			get {
				return this.wordCount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'WordCount\'");
				}
				this.wordCount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_Word_WordCount_isDone = false;
				this.Changed_WordCount_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WorkerConfusionMatrixPrior'</summary>
		public Dirichlet[][] WorkerConfusionMatrixPrior
		{
			get {
				return this.workerConfusionMatrixPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=this.workerCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.workerCount)+" was expected for variable \'WorkerConfusionMatrixPrior\'");
				}
				this.workerConfusionMatrixPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_WorkerConfusionMatrixPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WorkerCount'</summary>
		public int WorkerCount
		{
			get {
				return this.workerCount;
			}
			set {
				if (this.workerCount!=value) {
					this.workerCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
					this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone = false;
					this.Changed_WorkerCount_isDone = false;
					this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone = false;
					this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'WorkerLabel'</summary>
		public int[][] WorkerLabel
		{
			get {
				return this.workerLabel;
			}
			set {
				if ((value!=null)&&(value.Length!=this.workerCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.workerCount)+" was expected for variable \'WorkerLabel\'");
				}
				this.workerLabel = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WorkerTaskCount'</summary>
		public int[] WorkerTaskCount
		{
			get {
				return this.workerTaskCount;
			}
			set {
				if ((value!=null)&&(value.Length!=this.workerCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.workerCount)+" was expected for variable \'WorkerTaskCount\'");
				}
				this.workerTaskCount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = false;
				this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone = false;
				this.Changed_WorkerTaskCount_isDone = false;
				this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = false;
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and ProbWordPrior and Task and TruthProbPrior and Word and WordCount and WorkerConfusionMatrixPrior and WorkerCount and WorkerLabel and WorkerTaskCount</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone) {
				return ;
			}
			Bernoulli vBernoulli0 = Bernoulli.Uniform();
			this.evidence_marginal_F = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_B;
			// Create array for 'evidence_selector_cases' Backwards messages.
			evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			Parallel.For(0, 2, delegate(int _ind0) {
				evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			});
			Bernoulli[] evidence_selector_cases_0_uses_B;
			// Create array for 'evidence_selector_cases_0_uses' Backwards messages.
			evidence_selector_cases_0_uses_B = new Bernoulli[39];
			evidence_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			Discrete Truth_F_reduced;
			Truth_F_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			// Create array for replicates of 'TrueLabelSubarray_KN__selector_uses_B'
			Discrete[][][] TrueLabelSubarray_KN__selector_uses_B = new Discrete[this.workerCount][][];
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'TrueLabelSubarray_KN__selector_uses_B'
				TrueLabelSubarray_KN__selector_uses_B[K] = new Discrete[this.workerTaskCount[K]][];
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					// Create array for 'TrueLabelSubarray_KN__selector_uses' Backwards messages.
					TrueLabelSubarray_KN__selector_uses_B[K][KN] = new Discrete[2];
					TrueLabelSubarray_KN__selector_uses_B[K][KN][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
					TrueLabelSubarray_KN__selector_uses_B[K][KN][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				}
			});
			// Create array for replicates of 'TrueLabelSubarray_KN__selector_cases_uses_B'
			Bernoulli[][][][] TrueLabelSubarray_KN__selector_cases_uses_B = new Bernoulli[this.workerCount][][][];
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'TrueLabelSubarray_KN__selector_cases_uses_B'
				TrueLabelSubarray_KN__selector_cases_uses_B[K] = new Bernoulli[this.workerTaskCount[K]][][];
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					// Create array for 'TrueLabelSubarray_KN__selector_cases_uses' Backwards messages.
					TrueLabelSubarray_KN__selector_cases_uses_B[K][KN] = new Bernoulli[5][];
				}
				for(int C = 0; C<5; C++) {
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						// Create array for 'TrueLabelSubarray_KN__selector_cases_uses' Backwards messages.
						TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C] = new Bernoulli[3];
						TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C][1] = Bernoulli.Uniform();
						TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C][0] = Bernoulli.Uniform();
						TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C][2] = Bernoulli.Uniform();
					}
				}
			});
			DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> Truth_Task_F;
			// Create array for 'Truth_Task' Forwards messages.
			Truth_Task_F = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for 'Truth_Task' Forwards messages.
				Truth_Task_F[K] = new DistributionRefArray<Discrete,int>(this.workerTaskCount[K]);
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					Truth_Task_F[K][KN] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				}
			});
			// Create array for replicates of 'WorkerConfusionMatrix_K_C__B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> WorkerConfusionMatrix_K_C__B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'WorkerConfusionMatrix_K_C__B'
				WorkerConfusionMatrix_K_C__B[K] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.workerTaskCount[K]);
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					// Create array for replicates of 'WorkerConfusionMatrix_K_C__B'
					WorkerConfusionMatrix_K_C__B[K][KN] = new DistributionRefArray<Dirichlet,Vector>(5);
				}
				for(int C = 0; C<5; C++) {
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						WorkerConfusionMatrix_K_C__B[K][KN][C] = ArrayHelper.MakeUniform<Dirichlet>(this.workerConfusionMatrixPrior[K][C]);
						// Message to 'WorkerConfusionMatrix_K_C_' from Discrete factor
						WorkerConfusionMatrix_K_C__B[K][KN][C] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.workerLabel[K][KN], WorkerConfusionMatrix_K_C__B[K][KN][C]);
					}
				}
			});
			// Create array for replicates of 'WorkerConfusionMatrix_rep_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> WorkerConfusionMatrix_rep_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'WorkerConfusionMatrix_rep_B'
				WorkerConfusionMatrix_rep_B[K] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(5);
				for(int C = 0; C<5; C++) {
					// Create array for 'WorkerConfusionMatrix_rep' Backwards messages.
					WorkerConfusionMatrix_rep_B[K][C] = new DistributionRefArray<Dirichlet,Vector>(this.workerTaskCount[K]);
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						WorkerConfusionMatrix_rep_B[K][C][KN] = ArrayHelper.MakeUniform<Dirichlet>(this.workerConfusionMatrixPrior[K][C]);
					}
				}
			});
			// Create array for 'WorkerConfusionMatrix_marginal' Forwards messages.
			this.WorkerConfusionMatrix_marginal_F = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for 'WorkerConfusionMatrix_marginal' Forwards messages.
				this.WorkerConfusionMatrix_marginal_F[K] = new DistributionRefArray<Dirichlet,Vector>(5);
				for(int C = 0; C<5; C++) {
					this.WorkerConfusionMatrix_marginal_F[K][C] = ArrayHelper.MakeUniform<Dirichlet>(this.workerConfusionMatrixPrior[K][C]);
				}
			});
			// Create array for replicates of 'TrueLabelSubarray_KN__selector_cases_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> TrueLabelSubarray_KN__selector_cases_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'TrueLabelSubarray_KN__selector_cases_B'
				TrueLabelSubarray_KN__selector_cases_B[K] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.workerTaskCount[K]);
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					// Create array for 'TrueLabelSubarray_KN__selector_cases' Backwards messages.
					TrueLabelSubarray_KN__selector_cases_B[K][KN] = new DistributionStructArray<Bernoulli,bool>(5);
				}
				for(int C = 0; C<5; C++) {
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						TrueLabelSubarray_KN__selector_cases_B[K][KN][C] = Bernoulli.Uniform();
					}
				}
			});
			// Create array for replicates of 'TrueLabelSubarray_KN__selector_B'
			DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> TrueLabelSubarray_KN__selector_B = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for replicates of 'TrueLabelSubarray_KN__selector_B'
				TrueLabelSubarray_KN__selector_B[K] = new DistributionRefArray<Discrete,int>(this.workerTaskCount[K]);
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					TrueLabelSubarray_KN__selector_B[K][KN] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				}
			});
			DistributionRefArray<Discrete,int> Truth_depth0_B;
			// Create array for 'Truth_depth0' Backwards messages.
			Truth_depth0_B = new DistributionRefArray<Discrete,int>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				Truth_depth0_B[N] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			Discrete[][] Truth_uses_B;
			// Create array for 'Truth_uses' Backwards messages.
			Truth_uses_B = new Discrete[1000][];
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for 'Truth_uses' Backwards messages.
				Truth_uses_B[N] = new Discrete[2];
				Truth_uses_B[N][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				Truth_uses_B[N][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			// Create array for replicates of 'Truth_N__selector_uses_B'
			Discrete[][] Truth_N__selector_uses_B = new Discrete[1000][];
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for 'Truth_N__selector_uses' Backwards messages.
				Truth_N__selector_uses_B[N] = new Discrete[2];
				Truth_N__selector_uses_B[N][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				Truth_N__selector_uses_B[N][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			// Create array for replicates of 'Truth_N__selector_cases_uses_B'
			Bernoulli[][][] Truth_N__selector_cases_uses_B = new Bernoulli[1000][][];
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for 'Truth_N__selector_cases_uses' Backwards messages.
				Truth_N__selector_cases_uses_B[N] = new Bernoulli[5][];
				for(int C = 0; C<5; C++) {
					// Create array for 'Truth_N__selector_cases_uses' Backwards messages.
					Truth_N__selector_cases_uses_B[N][C] = new Bernoulli[5];
					Truth_N__selector_cases_uses_B[N][C][4] = Bernoulli.Uniform();
					Truth_N__selector_cases_uses_B[N][C][3] = Bernoulli.Uniform();
					Truth_N__selector_cases_uses_B[N][C][1] = Bernoulli.Uniform();
					Truth_N__selector_cases_uses_B[N][C][0] = Bernoulli.Uniform();
					Truth_N__selector_cases_uses_B[N][C][2] = Bernoulli.Uniform();
				}
			});
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> ProbWord_C__rep_B_reduced = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(1000);
			DistributionRefArray<Dirichlet,Vector> ProbWord_C__B_reduced = new DistributionRefArray<Dirichlet,Vector>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				ProbWord_C__rep_B_reduced[N] = default(DistributionRefArray<Dirichlet,Vector>);
				// Create array for 'ProbWord_C__rep' Backwards messages.
				ProbWord_C__rep_B_reduced[N] = new DistributionRefArray<Dirichlet,Vector>(this.wordCount[N]);
				for(int WN = 0; WN<this.wordCount[N]; WN++) {
					ProbWord_C__rep_B_reduced[N][WN] = ArrayHelper.MakeUniform<Dirichlet>(this.probWordPrior);
					// Message to 'ProbWord_C__rep' from Discrete factor
					ProbWord_C__rep_B_reduced[N][WN] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.word[N][WN], ProbWord_C__rep_B_reduced[N][WN]);
				}
				ProbWord_C__B_reduced[N] = default(Dirichlet);
				ProbWord_C__B_reduced[N] = ArrayHelper.MakeUniform<Dirichlet>(this.probWordPrior);
				// Message to 'ProbWord_C_' from Replicate factor
				ProbWord_C__B_reduced[N] = ReplicateOp.DefAverageLogarithm<Dirichlet>(ProbWord_C__rep_B_reduced[N], ProbWord_C__B_reduced[N]);
			});
			// Create array for replicates of 'ProbWord_rep_B'
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> ProbWord_rep_B = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(5);
			Parallel.For(0, 5, delegate(int C) {
				// Create array for 'ProbWord_rep' Backwards messages.
				ProbWord_rep_B[C] = new DistributionRefArray<Dirichlet,Vector>(1000);
			});
			Parallel.For(0, 1000, delegate(int N) {
				for(int C = 0; C<5; C++) {
					ProbWord_rep_B[C][N] = ArrayHelper.MakeUniform<Dirichlet>(this.probWordPrior);
				}
			});
			// Create array for 'ProbWord_marginal' Forwards messages.
			this.ProbWord_marginal_F = new DistributionRefArray<Dirichlet,Vector>(5);
			Parallel.For(0, 5, delegate(int C) {
				this.ProbWord_marginal_F[C] = ArrayHelper.MakeUniform<Dirichlet>(this.probWordPrior);
			});
			// Create array for replicates of 'Truth_N__selector_cases_rep_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Truth_N__selector_cases_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for replicates of 'Truth_N__selector_cases_rep_B'
				Truth_N__selector_cases_rep_B[N] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(5);
				for(int C = 0; C<5; C++) {
					// Create array for 'Truth_N__selector_cases_rep' Backwards messages.
					Truth_N__selector_cases_rep_B[N][C] = new DistributionStructArray<Bernoulli,bool>(this.wordCount[N]);
					for(int WN = 0; WN<this.wordCount[N]; WN++) {
						Truth_N__selector_cases_rep_B[N][C][WN] = Bernoulli.Uniform();
					}
				}
			});
			// Create array for replicates of 'Truth_N__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Truth_N__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for 'Truth_N__selector_cases' Backwards messages.
				Truth_N__selector_cases_B[N] = new DistributionStructArray<Bernoulli,bool>(5);
				for(int C = 0; C<5; C++) {
					Truth_N__selector_cases_B[N][C] = Bernoulli.Uniform();
				}
			});
			// Create array for replicates of 'Truth_N__selector_B'
			DistributionRefArray<Discrete,int> Truth_N__selector_B = new DistributionRefArray<Discrete,int>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				Truth_N__selector_B[N] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			DistributionRefArray<Discrete,int> Truth_use_B;
			// Create array for 'Truth_use' Backwards messages.
			Truth_use_B = new DistributionRefArray<Discrete,int>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				Truth_use_B[N] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			// Create array for 'Truth_marginal' Forwards messages.
			this.Truth_marginal_F = new DistributionRefArray<Discrete,int>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				this.Truth_marginal_F[N] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
			});
			DistributionRefArray<Dirichlet,Vector> TruthProb_rep_B;
			// Create array for 'TruthProb_rep' Backwards messages.
			TruthProb_rep_B = new DistributionRefArray<Dirichlet,Vector>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				TruthProb_rep_B[N] = ArrayHelper.MakeUniform<Dirichlet>(this.truthProbPrior);
			});
			this.TruthProb_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.truthProbPrior);
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'TruthProb_marginal' from Variable factor
				this.TruthProb_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.TruthProb_use_B, this.truthProbPrior, this.TruthProb_marginal_F);
				Parallel.For(0, 5, delegate(int C) {
					// Message to 'ProbWord_marginal' from Variable factor
					this.ProbWord_marginal_F[C] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.ProbWord_use_B[C], this.probWordPrior, this.ProbWord_marginal_F[C]);
				});
				Parallel.For(0, 1000, delegate(int N) {
					for(int C = 0; C<5; C++) {
						for(int WN = 0; WN<this.wordCount[N]; WN++) {
							// Message to 'Truth_N__selector_cases_rep' from Discrete factor
							Truth_N__selector_cases_rep_B[N][C][WN] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.AverageLogFactor(this.word[N][WN], this.ProbWord_marginal_F[C]));
						}
						// Message to 'Truth_N__selector_cases_uses' from Replicate factor
						Truth_N__selector_cases_uses_B[N][C][2] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Truth_N__selector_cases_rep_B[N][C], Truth_N__selector_cases_uses_B[N][C][2]);
						// Message to 'Truth_N__selector_cases' from Replicate factor
						Truth_N__selector_cases_B[N][C] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Truth_N__selector_cases_uses_B[N][C], Truth_N__selector_cases_B[N][C]);
					}
				});
				Parallel.For(0, this.workerCount, delegate(int K) {
					for(int C = 0; C<5; C++) {
						// Message to 'WorkerConfusionMatrix_marginal' from Variable factor
						this.WorkerConfusionMatrix_marginal_F[K][C] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.WorkerConfusionMatrix_use_B[K][C], this.workerConfusionMatrixPrior[K][C], this.WorkerConfusionMatrix_marginal_F[K][C]);
						for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
							// Message to 'TrueLabelSubarray_KN__selector_cases_uses' from Discrete factor
							TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C][2] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.AverageLogFactor(this.workerLabel[K][KN], this.WorkerConfusionMatrix_marginal_F[K][C]));
							// Message to 'TrueLabelSubarray_KN__selector_cases' from Replicate factor
							TrueLabelSubarray_KN__selector_cases_B[K][KN][C] = ReplicateOp.DefAverageLogarithm<Bernoulli>(TrueLabelSubarray_KN__selector_cases_uses_B[K][KN][C], TrueLabelSubarray_KN__selector_cases_B[K][KN][C]);
						}
					}
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						// Message to 'TrueLabelSubarray_KN__selector_uses' from CasesInt factor
						TrueLabelSubarray_KN__selector_uses_B[K][KN][0] = IntCasesOp.IAverageLogarithm(TrueLabelSubarray_KN__selector_cases_B[K][KN], TrueLabelSubarray_KN__selector_uses_B[K][KN][0]);
						// Message to 'TrueLabelSubarray_KN__selector' from Replicate factor
						TrueLabelSubarray_KN__selector_B[K][KN] = ReplicateOp.DefAverageLogarithm<Discrete>(TrueLabelSubarray_KN__selector_uses_B[K][KN], TrueLabelSubarray_KN__selector_B[K][KN]);
					}
				});
				// Message to 'Truth_depth0' from JaggedSubarray factor
				Truth_depth0_B = JaggedSubarrayOp<int>.ArrayAverageLogarithm<Discrete,DistributionRefArray<Discrete,int>,DistributionRefArray<Discrete,int>>(TrueLabelSubarray_KN__selector_B, this.task, Truth_depth0_B);
				Parallel.For(0, 1000, delegate(int N) {
					// Message to 'Truth_N__selector_uses' from CasesInt factor
					Truth_N__selector_uses_B[N][0] = IntCasesOp.IAverageLogarithm(Truth_N__selector_cases_B[N], Truth_N__selector_uses_B[N][0]);
					// Message to 'Truth_N__selector' from Replicate factor
					Truth_N__selector_B[N] = ReplicateOp.DefAverageLogarithm<Discrete>(Truth_N__selector_uses_B[N], Truth_N__selector_B[N]);
					// Message to 'Truth_uses' from Copy factor
					Truth_uses_B[N][1] = ArrayHelper.SetTo<Discrete>(Truth_uses_B[N][1], Truth_N__selector_B[N]);
					// Message to 'Truth_uses' from Copy factor
					Truth_uses_B[N][0] = ArrayHelper.SetTo<Discrete>(Truth_uses_B[N][0], Truth_depth0_B[N]);
					// Message to 'Truth_use' from Replicate factor
					Truth_use_B[N] = ReplicateOp.DefAverageLogarithm<Discrete>(Truth_uses_B[N], Truth_use_B[N]);
				});
				// Message to 'Truth' from Discrete factor
				Truth_F_reduced = DiscreteFromDirichletOp.SampleAverageLogarithm(this.TruthProb_marginal_F, Truth_F_reduced);
				Parallel.For(0, 1000, delegate(int N) {
					// Message to 'Truth_marginal' from Variable factor
					this.Truth_marginal_F[N] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(Truth_use_B[N], Truth_F_reduced, this.Truth_marginal_F[N]);
					// Message to 'TruthProb_rep' from Discrete factor
					TruthProb_rep_B[N] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.Truth_marginal_F[N], TruthProb_rep_B[N]);
				});
				// Message to 'TruthProb_use' from Replicate factor
				this.TruthProb_use_B = ReplicateOp.DefAverageLogarithm<Dirichlet>(TruthProb_rep_B, this.TruthProb_use_B);
				Parallel.For(0, 1000, delegate(int N) {
					for(int C = 0; C<5; C++) {
						// Message to 'ProbWord_rep' from EnterOne factor
						ProbWord_rep_B[C][N] = GateEnterOneOp<Vector>.ValueAverageLogarithm<Dirichlet>(ProbWord_C__B_reduced[N], this.Truth_marginal_F[N], C, ProbWord_rep_B[C][N]);
					}
				});
				Parallel.For(0, 5, delegate(int C) {
					// Message to 'ProbWord_use' from Replicate factor
					this.ProbWord_use_B[C] = ReplicateOp.DefAverageLogarithm<Dirichlet>(ProbWord_rep_B[C], this.ProbWord_use_B[C]);
				});
				// Message to 'Truth_Task' from JaggedSubarray factor
				Truth_Task_F = JaggedSubarrayOp<int>.ItemsAverageLogarithm<Discrete,DistributionRefArray<Discrete,int>,DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>>(this.Truth_marginal_F, this.task, Truth_Task_F);
				Parallel.For(0, this.workerCount, delegate(int K) {
					for(int C = 0; C<5; C++) {
						for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
							// Message to 'WorkerConfusionMatrix_rep' from EnterOne factor
							WorkerConfusionMatrix_rep_B[K][C][KN] = GateEnterOneOp<Vector>.ValueAverageLogarithm<Dirichlet>(WorkerConfusionMatrix_K_C__B[K][KN][C], Truth_Task_F[K][KN], C, WorkerConfusionMatrix_rep_B[K][C][KN]);
						}
						// Message to 'WorkerConfusionMatrix_use' from Replicate factor
						this.WorkerConfusionMatrix_use_B[K][C] = ReplicateOp.DefAverageLogarithm<Dirichlet>(WorkerConfusionMatrix_rep_B[K][C], this.WorkerConfusionMatrix_use_B[K][C]);
					}
				});
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'TruthProb_marginal' from Variable factor
			this.TruthProb_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.TruthProb_use_B, this.truthProbPrior, this.TruthProb_marginal_F);
			// Message to 'Truth' from Discrete factor
			Truth_F_reduced = DiscreteFromDirichletOp.SampleAverageLogarithm(this.TruthProb_marginal_F, Truth_F_reduced);
			Parallel.For(0, 1000, delegate(int N) {
				// Message to 'Truth_marginal' from Variable factor
				this.Truth_marginal_F[N] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(Truth_use_B[N], Truth_F_reduced, this.Truth_marginal_F[N]);
				for(int C = 0; C<5; C++) {
					// Message to 'ProbWord_rep' from EnterOne factor
					ProbWord_rep_B[C][N] = GateEnterOneOp<Vector>.ValueAverageLogarithm<Dirichlet>(ProbWord_C__B_reduced[N], this.Truth_marginal_F[N], C, ProbWord_rep_B[C][N]);
				}
			});
			Parallel.For(0, 5, delegate(int C) {
				// Message to 'ProbWord_use' from Replicate factor
				this.ProbWord_use_B[C] = ReplicateOp.DefAverageLogarithm<Dirichlet>(ProbWord_rep_B[C], this.ProbWord_use_B[C]);
				// Message to 'ProbWord_marginal' from Variable factor
				this.ProbWord_marginal_F[C] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.ProbWord_use_B[C], this.probWordPrior, this.ProbWord_marginal_F[C]);
			});
			// Message to 'Truth_Task' from JaggedSubarray factor
			Truth_Task_F = JaggedSubarrayOp<int>.ItemsAverageLogarithm<Discrete,DistributionRefArray<Discrete,int>,DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>>(this.Truth_marginal_F, this.task, Truth_Task_F);
			Parallel.For(0, this.workerCount, delegate(int K) {
				for(int C = 0; C<5; C++) {
					for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
						// Message to 'WorkerConfusionMatrix_rep' from EnterOne factor
						WorkerConfusionMatrix_rep_B[K][C][KN] = GateEnterOneOp<Vector>.ValueAverageLogarithm<Dirichlet>(WorkerConfusionMatrix_K_C__B[K][KN][C], Truth_Task_F[K][KN], C, WorkerConfusionMatrix_rep_B[K][C][KN]);
					}
					// Message to 'WorkerConfusionMatrix_use' from Replicate factor
					this.WorkerConfusionMatrix_use_B[K][C] = ReplicateOp.DefAverageLogarithm<Dirichlet>(WorkerConfusionMatrix_rep_B[K][C], this.WorkerConfusionMatrix_use_B[K][C]);
					// Message to 'WorkerConfusionMatrix_marginal' from Variable factor
					this.WorkerConfusionMatrix_marginal_F[K][C] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.WorkerConfusionMatrix_use_B[K][C], this.workerConfusionMatrixPrior[K][C], this.WorkerConfusionMatrix_marginal_F[K][C]);
				}
			});
			evidence_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Random factor
			evidence_selector_cases_0_uses_B[3] = Bernoulli.FromLogOdds(UnaryOp<Vector>.AverageLogFactor<Dirichlet>(this.TruthProb_marginal_F, this.truthProbPrior));
			evidence_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Variable factor
			evidence_selector_cases_0_uses_B[4] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Dirichlet>(this.TruthProb_marginal_F));
			Bernoulli[][] evidence_selector_cases_0_rep_uses_B;
			// Create array for 'evidence_selector_cases_0_rep_uses' Backwards messages.
			evidence_selector_cases_0_rep_uses_B = new Bernoulli[1000][];
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_0_rep_B;
			// Create array for 'evidence_selector_cases_0_rep' Backwards messages.
			evidence_selector_cases_0_rep_B = new DistributionStructArray<Bernoulli,bool>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				// Create array for 'evidence_selector_cases_0_rep_uses' Backwards messages.
				evidence_selector_cases_0_rep_uses_B[N] = new Bernoulli[3];
				evidence_selector_cases_0_rep_uses_B[N][2] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep_uses_B[N][0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep_uses' from Discrete factor
				evidence_selector_cases_0_rep_uses_B[N][0] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.AverageLogFactor(this.Truth_marginal_F[N], this.TruthProb_marginal_F));
				evidence_selector_cases_0_rep_uses_B[N][1] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep_uses' from Variable factor
				evidence_selector_cases_0_rep_uses_B[N][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Discrete>(this.Truth_marginal_F[N]));
				evidence_selector_cases_0_rep_B[N] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep' from Replicate factor
				evidence_selector_cases_0_rep_B[N] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep_uses_B[N], evidence_selector_cases_0_rep_B[N]);
			});
			evidence_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[6] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep_B, evidence_selector_cases_0_uses_B[6]);
			Bernoulli[][] evidence_selector_cases_0_rep2_uses_B;
			// Create array for 'evidence_selector_cases_0_rep2_uses' Backwards messages.
			evidence_selector_cases_0_rep2_uses_B = new Bernoulli[5][];
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_0_rep2_B;
			// Create array for 'evidence_selector_cases_0_rep2' Backwards messages.
			evidence_selector_cases_0_rep2_B = new DistributionStructArray<Bernoulli,bool>(5);
			Parallel.For(0, 5, delegate(int C) {
				// Create array for 'evidence_selector_cases_0_rep2_uses' Backwards messages.
				evidence_selector_cases_0_rep2_uses_B[C] = new Bernoulli[2];
				evidence_selector_cases_0_rep2_uses_B[C][0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep2_uses' from Random factor
				evidence_selector_cases_0_rep2_uses_B[C][0] = Bernoulli.FromLogOdds(UnaryOp<Vector>.AverageLogFactor<Dirichlet>(this.ProbWord_marginal_F[C], this.probWordPrior));
				evidence_selector_cases_0_rep2_uses_B[C][1] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep2_uses' from Variable factor
				evidence_selector_cases_0_rep2_uses_B[C][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Dirichlet>(this.ProbWord_marginal_F[C]));
				evidence_selector_cases_0_rep2_B[C] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep2' from Replicate factor
				evidence_selector_cases_0_rep2_B[C] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep2_uses_B[C], evidence_selector_cases_0_rep2_B[C]);
			});
			evidence_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[13] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep2_B, evidence_selector_cases_0_uses_B[13]);
			// Create array for replicates of 'evidence_selector_cases_0_rep4_rep_uses_B'
			Bernoulli[][][] evidence_selector_cases_0_rep4_rep_uses_B = new Bernoulli[this.workerCount][][];
			// Create array for replicates of 'evidence_selector_cases_0_rep4_rep_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> evidence_selector_cases_0_rep4_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.workerCount);
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_0_rep4_B;
			// Create array for 'evidence_selector_cases_0_rep4' Backwards messages.
			evidence_selector_cases_0_rep4_B = new DistributionStructArray<Bernoulli,bool>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for 'evidence_selector_cases_0_rep4_rep_uses' Backwards messages.
				evidence_selector_cases_0_rep4_rep_uses_B[K] = new Bernoulli[5][];
				// Create array for 'evidence_selector_cases_0_rep4_rep' Backwards messages.
				evidence_selector_cases_0_rep4_rep_B[K] = new DistributionStructArray<Bernoulli,bool>(5);
				for(int C = 0; C<5; C++) {
					// Create array for 'evidence_selector_cases_0_rep4_rep_uses' Backwards messages.
					evidence_selector_cases_0_rep4_rep_uses_B[K][C] = new Bernoulli[2];
					evidence_selector_cases_0_rep4_rep_uses_B[K][C][0] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep4_rep_uses' from Random factor
					evidence_selector_cases_0_rep4_rep_uses_B[K][C][0] = Bernoulli.FromLogOdds(UnaryOp<Vector>.AverageLogFactor<Dirichlet>(this.WorkerConfusionMatrix_marginal_F[K][C], this.workerConfusionMatrixPrior[K][C]));
					evidence_selector_cases_0_rep4_rep_uses_B[K][C][1] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep4_rep_uses' from Variable factor
					evidence_selector_cases_0_rep4_rep_uses_B[K][C][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Dirichlet>(this.WorkerConfusionMatrix_marginal_F[K][C]));
					evidence_selector_cases_0_rep4_rep_B[K][C] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep4_rep' from Replicate factor
					evidence_selector_cases_0_rep4_rep_B[K][C] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep4_rep_uses_B[K][C], evidence_selector_cases_0_rep4_rep_B[K][C]);
				}
				evidence_selector_cases_0_rep4_B[K] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep4' from Replicate factor
				evidence_selector_cases_0_rep4_B[K] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep4_rep_B[K], evidence_selector_cases_0_rep4_B[K]);
			});
			evidence_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[18] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep4_B, evidence_selector_cases_0_uses_B[18]);
			// Create array for replicates of 'evidence_selector_cases_0_rep8_rep_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> evidence_selector_cases_0_rep8_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.workerCount);
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_0_rep8_B;
			// Create array for 'evidence_selector_cases_0_rep8' Backwards messages.
			evidence_selector_cases_0_rep8_B = new DistributionStructArray<Bernoulli,bool>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for 'evidence_selector_cases_0_rep8_rep' Backwards messages.
				evidence_selector_cases_0_rep8_rep_B[K] = new DistributionStructArray<Bernoulli,bool>(this.workerTaskCount[K]);
				for(int KN = 0; KN<this.workerTaskCount[K]; KN++) {
					evidence_selector_cases_0_rep8_rep_B[K][KN] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep8_rep' from CasesInt factor
					evidence_selector_cases_0_rep8_rep_B[K][KN] = Bernoulli.FromLogOdds(IntCasesOp.AverageLogFactor(TrueLabelSubarray_KN__selector_cases_B[K][KN], Truth_Task_F[K][KN]));
				}
				evidence_selector_cases_0_rep8_B[K] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep8' from Replicate factor
				evidence_selector_cases_0_rep8_B[K] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep8_rep_B[K], evidence_selector_cases_0_rep8_B[K]);
			});
			evidence_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[28] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep8_B, evidence_selector_cases_0_uses_B[28]);
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_0_rep13_B;
			// Create array for 'evidence_selector_cases_0_rep13' Backwards messages.
			evidence_selector_cases_0_rep13_B = new DistributionStructArray<Bernoulli,bool>(1000);
			Parallel.For(0, 1000, delegate(int N) {
				evidence_selector_cases_0_rep13_B[N] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep13' from CasesInt factor
				evidence_selector_cases_0_rep13_B[N] = Bernoulli.FromLogOdds(IntCasesOp.AverageLogFactor(Truth_N__selector_cases_B[N], this.Truth_marginal_F[N]));
			});
			evidence_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[33] = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_rep13_B, evidence_selector_cases_0_uses_B[33]);
			Bernoulli evidence_selector_cases_0_B = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0' from Replicate factor
			evidence_selector_cases_0_B = ReplicateOp.DefAverageLogarithm<Bernoulli>(evidence_selector_cases_0_uses_B, evidence_selector_cases_0_B);
			// Message to 'evidence_selector_cases' from Copy factor
			evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(evidence_selector_cases_B[0], evidence_selector_cases_0_B);
			Bernoulli evidence_selector_B = default(Bernoulli);
			// Message to 'evidence_selector' from Cases factor
			evidence_selector_B = CasesOp.BAverageLogarithm(evidence_selector_cases_B);
			// Message to 'evidence_marginal' from Variable factor
			this.evidence_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(evidence_selector_B, vBernoulli0, this.evidence_marginal_F);
			this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbWordPrior and must reset on changes to Task and TruthProbPrior and Word and WordCount and WorkerConfusionMatrixPrior and WorkerCount and WorkerLabel and WorkerTaskCount</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised)) {
				return ;
			}
			Parallel.For(0, 5, delegate(int C) {
				this.ProbWord_use_B[C] = ArrayHelper.MakeUniform<Dirichlet>(this.probWordPrior);
			});
			this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and TruthProbPrior and must reset on changes to ProbWordPrior and Task and Word and WordCount and WorkerConfusionMatrixPrior and WorkerCount and WorkerLabel and WorkerTaskCount</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised)) {
				return ;
			}
			this.TruthProb_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.truthProbPrior);
			this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isDone = true;
			this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and WorkerConfusionMatrixPrior and WorkerCount and must reset on changes to ProbWordPrior and Task and TruthProbPrior and Word and WordCount and WorkerLabel and WorkerTaskCount</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised)) {
				return ;
			}
			Parallel.For(0, this.workerCount, delegate(int K) {
				for(int C = 0; C<5; C++) {
					this.WorkerConfusionMatrix_use_B[K][C] = ArrayHelper.MakeUniform<Dirichlet>(this.workerConfusionMatrixPrior[K][C]);
				}
			});
			this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone = true;
			this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ProbWordPrior</summary>
		private void Changed_ProbWordPrior()
		{
			if (this.Changed_ProbWordPrior_isDone) {
				return ;
			}
			this.ProbWordPrior_marginal = new PointMass<Dirichlet>(this.probWordPrior);
			this.Changed_ProbWordPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Task</summary>
		private void Changed_Task()
		{
			if (this.Changed_Task_isDone) {
				return ;
			}
			this.Task_marginal = new PointMass<int[][]>(this.task);
			this.Changed_Task_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of TruthProbPrior</summary>
		private void Changed_TruthProbPrior()
		{
			if (this.Changed_TruthProbPrior_isDone) {
				return ;
			}
			this.TruthProbPrior_marginal = new PointMass<Dirichlet>(this.truthProbPrior);
			this.Changed_TruthProbPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Word and WordCount</summary>
		private void Changed_Word_WordCount()
		{
			if (this.Changed_Word_WordCount_isDone) {
				return ;
			}
			this.Word_marginal = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(1000, delegate(int N) {
				return new DistributionRefArray<Discrete,int>(this.wordCount[N], delegate(int WN) {
					return ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(78));
				});
			});
			this.Word_marginal = Distribution.SetPoint<DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>,int[][]>(this.Word_marginal, this.word);
			this.Changed_Word_WordCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WordCount</summary>
		private void Changed_WordCount()
		{
			if (this.Changed_WordCount_isDone) {
				return ;
			}
			this.WordCount_marginal = new PointMass<int[]>(this.wordCount);
			this.Changed_WordCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WorkerConfusionMatrixPrior</summary>
		private void Changed_WorkerConfusionMatrixPrior()
		{
			if (this.Changed_WorkerConfusionMatrixPrior_isDone) {
				return ;
			}
			this.WorkerConfusionMatrixPrior_marginal = new PointMass<Dirichlet[][]>(this.workerConfusionMatrixPrior);
			this.Changed_WorkerConfusionMatrixPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WorkerCount</summary>
		private void Changed_WorkerCount()
		{
			if (this.Changed_WorkerCount_isDone) {
				return ;
			}
			this.WorkerCount_marginal = new PointMass<int>(this.workerCount);
			// Create array for 'WorkerConfusionMatrix_use' Backwards messages.
			this.WorkerConfusionMatrix_use_B = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.workerCount);
			Parallel.For(0, this.workerCount, delegate(int K) {
				// Create array for 'WorkerConfusionMatrix_use' Backwards messages.
				this.WorkerConfusionMatrix_use_B[K] = new DistributionRefArray<Dirichlet,Vector>(5);
			});
			this.Changed_WorkerCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WorkerCount and WorkerLabel and WorkerTaskCount</summary>
		private void Changed_WorkerCount_WorkerLabel_WorkerTaskCount()
		{
			if (this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone) {
				return ;
			}
			this.WorkerLabel_marginal = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.workerCount, delegate(int K) {
				return new DistributionRefArray<Discrete,int>(this.workerTaskCount[K], delegate(int KN) {
					return ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(5));
				});
			});
			this.WorkerLabel_marginal = Distribution.SetPoint<DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>,int[][]>(this.WorkerLabel_marginal, this.workerLabel);
			this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WorkerTaskCount</summary>
		private void Changed_WorkerTaskCount()
		{
			if (this.Changed_WorkerTaskCount_isDone) {
				return ;
			}
			this.WorkerTaskCount_marginal = new PointMass<int[]>(this.workerTaskCount);
			this.Changed_WorkerTaskCount_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'ProbWord_use' Backwards messages.
			this.ProbWord_use_B = new DistributionRefArray<Dirichlet,Vector>(5);
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.evidence_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12_isDone = false;
					this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11_isDone = false;
				}
				this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9_isDone = false;
			}
			this.Changed_numberOfIterationsDecreased_TruthProbPrior_Init_ProbWordPrior_Task_Word_WordCount_WorkerConf13(initialise);
			this.Constant();
			this.Changed_numberOfIterationsDecreased_ProbWordPrior_Init_Task_TruthProbPrior_Word_WordCount_WorkerConf12(initialise);
			this.Changed_WorkerCount_WorkerLabel_WorkerTaskCount();
			this.Changed_WorkerConfusionMatrixPrior();
			this.Changed_ProbWordPrior();
			this.Changed_Word_WordCount();
			this.Changed_WordCount();
			this.Changed_TruthProbPrior();
			this.Changed_Task();
			this.Changed_WorkerTaskCount();
			this.Changed_WorkerCount();
			this.Changed_numberOfIterationsDecreased_WorkerConfusionMatrixPrior_WorkerCount_Init_ProbWordPrior_Task_T11(initialise);
			this.Changed_numberOfIterations_ProbWordPrior_Task_TruthProbPrior_Word_WordCount_WorkerConfusionMatrixPri9(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="WorkerCount") {
				return this.WorkerCount;
			}
			if (variableName=="WorkerTaskCount") {
				return this.WorkerTaskCount;
			}
			if (variableName=="Task") {
				return this.Task;
			}
			if (variableName=="TruthProbPrior") {
				return this.TruthProbPrior;
			}
			if (variableName=="WordCount") {
				return this.WordCount;
			}
			if (variableName=="Word") {
				return this.Word;
			}
			if (variableName=="ProbWordPrior") {
				return this.ProbWordPrior;
			}
			if (variableName=="WorkerConfusionMatrixPrior") {
				return this.WorkerConfusionMatrixPrior;
			}
			if (variableName=="WorkerLabel") {
				return this.WorkerLabel;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="WorkerLabel") {
				return this.WorkerLabelMarginal();
			}
			if (variableName=="WorkerConfusionMatrixPrior") {
				return this.WorkerConfusionMatrixPriorMarginal();
			}
			if (variableName=="ProbWordPrior") {
				return this.ProbWordPriorMarginal();
			}
			if (variableName=="Word") {
				return this.WordMarginal();
			}
			if (variableName=="WordCount") {
				return this.WordCountMarginal();
			}
			if (variableName=="TruthProbPrior") {
				return this.TruthProbPriorMarginal();
			}
			if (variableName=="Task") {
				return this.TaskMarginal();
			}
			if (variableName=="WorkerTaskCount") {
				return this.WorkerTaskCountMarginal();
			}
			if (variableName=="WorkerCount") {
				return this.WorkerCountMarginal();
			}
			if (variableName=="evidence") {
				return this.EvidenceMarginal();
			}
			if (variableName=="TruthProb") {
				return this.TruthProbMarginal();
			}
			if (variableName=="Truth") {
				return this.TruthMarginal();
			}
			if (variableName=="ProbWord") {
				return this.ProbWordMarginal();
			}
			if (variableName=="WorkerConfusionMatrix") {
				return this.WorkerConfusionMatrixMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbWord' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Dirichlet,Vector> ProbWordMarginal()
		{
			return this.ProbWord_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbWordPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> ProbWordPriorMarginal()
		{
			return this.ProbWordPrior_marginal;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="WorkerCount") {
				this.WorkerCount = (int)value;
				return ;
			}
			if (variableName=="WorkerTaskCount") {
				this.WorkerTaskCount = (int[])value;
				return ;
			}
			if (variableName=="Task") {
				this.Task = (int[][])value;
				return ;
			}
			if (variableName=="TruthProbPrior") {
				this.TruthProbPrior = (Dirichlet)value;
				return ;
			}
			if (variableName=="WordCount") {
				this.WordCount = (int[])value;
				return ;
			}
			if (variableName=="Word") {
				this.Word = (int[][])value;
				return ;
			}
			if (variableName=="ProbWordPrior") {
				this.ProbWordPrior = (Dirichlet)value;
				return ;
			}
			if (variableName=="WorkerConfusionMatrixPrior") {
				this.WorkerConfusionMatrixPrior = (Dirichlet[][])value;
				return ;
			}
			if (variableName=="WorkerLabel") {
				this.WorkerLabel = (int[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Task' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> TaskMarginal()
		{
			return this.Task_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Truth' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> TruthMarginal()
		{
			return this.Truth_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'TruthProb' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet TruthProbMarginal()
		{
			return this.TruthProb_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'TruthProbPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> TruthProbPriorMarginal()
		{
			return this.TruthProbPrior_marginal;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'WordCount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> WordCountMarginal()
		{
			return this.WordCount_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Word' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> WordMarginal()
		{
			return this.Word_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'WorkerConfusionMatrix' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> WorkerConfusionMatrixMarginal()
		{
			return this.WorkerConfusionMatrix_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'WorkerConfusionMatrixPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet[][]> WorkerConfusionMatrixPriorMarginal()
		{
			return this.WorkerConfusionMatrixPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'WorkerCount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> WorkerCountMarginal()
		{
			return this.WorkerCount_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'WorkerLabel' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> WorkerLabelMarginal()
		{
			return this.WorkerLabel_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'WorkerTaskCount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> WorkerTaskCountMarginal()
		{
			return this.WorkerTaskCount_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
